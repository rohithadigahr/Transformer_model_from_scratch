#!/usr/bin/env python3
"""
Interactive text selection for Transformer training
Run this script to choose your training text before running main.py
"""

import sys
import os
sys.path.append('src')

from text_collections import TextCollections
from config import Config

def preview_text(text, lines=5):
    """Preview first few lines of text"""
    preview_lines = text.strip().split('\n')[:lines]
    return '\n'.join(preview_lines) + "..."

def interactive_text_selection():
    """Interactive menu for selecting training text"""
    print("ðŸŽ¯ TRANSFORMER TRAINING TEXT SELECTOR")
    print("=" * 50)
    
    options = {
        '1': ('Mixed Genres (Recommended)', lambda: TextCollections.get_mixed_collection()),
        '2': ('Fantasy Adventure', lambda: TextCollections.get_fantasy_adventure() * 5),
        '3': ('Science Fiction', lambda: TextCollections.get_science_fiction() * 5),
        '4': ('Mystery/Detective', lambda: TextCollections.get_mystery_detective() * 5),
        '5': ('Classic Literature', lambda: TextCollections.get_classic_literature() * 5),
        '6': ('Poetry Collection', lambda: TextCollections.get_poetry_collection() * 8),
        '7': ('Historical Fiction', lambda: TextCollections.get_historical_fiction() * 5),
        '8': ('Conversation/Dialogue', lambda: TextCollections.get_conversation_data() * 6),
        '9': ('Custom Mix', None),  # Special case
        '0': ('Preview All Options', None)  # Special case
    }
    
    while True:
        print("\nAvailable text collections:")
        print("-" * 30)
        for key, (name, _) in options.items():
            print(f"{key}. {name}")
        
        choice = input("\nSelect an option (or 'q' to quit): ").strip()
        
        if choice.lower() == 'q':
            print("Exiting text selector.")
            return None
        
        if choice == '0':
            # Preview all options
            print("\n" + "="*60)
            print("TEXT PREVIEWS")
            print("="*60)
            for key, (name, func) in options.items():
                if func and key != '0':
                    print(f"\n{name}:")
                    print("-" * len(name))
                    sample = func()
                    print(preview_text(sample))
            continue
        
        if choice == '9':
            # Custom mix
            return create_custom_mix()
        
        if choice in options and options[choice][1]:
            name, func = options[choice]
            selected_text = func()
            
            # Show preview and stats
            print(f"\nâœ… Selected: {name}")
            print(f"Characters: {len(selected_text):,}")
            print(f"Unique chars: {len(set(selected_text))}")
            print(f"\nPreview:")
            print("-" * 20)
            print(preview_text(selected_text))
            
            confirm = input("\nUse this text? (y/n): ").strip().lower()
            if confirm == 'y':
                return selected_text
        else:
            print("Invalid option. Please try again.")

def create_custom_mix():
    """Create a custom mix of text types"""
    print("\nðŸŽ¨ CUSTOM TEXT MIX CREATOR")
    print("-" * 30)
    
    available_types = {
        'classic': 'Classic Literature',
        'fantasy': 'Fantasy Adventure', 
        'scifi': 'Science Fiction',
        'mystery': 'Mystery/Detective',
        'poetry': 'Poetry Collection',
        'historical': 'Historical Fiction',
        'conversation': 'Conversation/Dialogue'
    }
    
    print("Available text types:")
    for key, name in available_types.items():
        print(f"  {key}: {name}")
    
    print("\nEnter text types separated by spaces (e.g., 'fantasy scifi poetry')")
    selection = input("Your selection: ").strip().split()
    
    if not selection:
        print("No selection made.")
        return None
    
    # Validate selection
    valid_types = [t for t in selection if t in available_types]
    if not valid_types:
        print("No valid text types selected.")
        return None
    
    print(f"Creating mix with: {', '.join(valid_types)}")
    mixed_text = TextCollections.get_mixed_collection(valid_types)
    
    print(f"âœ… Custom mix created!")
    print(f"Characters: {len(mixed_text):,}")
    print(f"Preview:")
    print("-" * 20)
    print(preview_text(mixed_text))
    
    return mixed_text

def save_selected_text(text, filename="selected_training_text.py"):
    """Save the selected text to a config file"""
    config_content = f'''"""
Selected training text for Transformer model
Generated by text selector script
"""

SELECTED_TRAINING_TEXT = """
{text}
"""
'''
    
    filepath = os.path.join('src', filename)
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print(f"âœ… Selected text saved to: {filepath}")
    print("You can now run: python main.py")

def main():
    """Main function"""
    try:
        print("Welcome! This tool helps you select training text for your Transformer model.")
        print("Different text types will produce different generation styles.")
        print()
        
        selected_text = interactive_text_selection()
        
        if selected_text:
            save_choice = input("\nSave this selection for training? (y/n): ").strip().lower()
            if save_choice == 'y':
                save_selected_text(selected_text)
                print("\nðŸš€ Ready to train! Run: python main.py")
            else:
                print("Selection not saved. You can run this script again to choose different text.")
        else:
            print("No text selected.")
    
    except KeyboardInterrupt:
        print("\n\nText selection cancelled.")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()